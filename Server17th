

//import all classes from both packages using *
import java.io.*;//used to process input (texts/binary files) & the output (java files)
import java.net.*;//provides classes/interfaces for networking

public class Server
{
    private ServerSocket serverSock;
    //private object is responsible for listening for incoming connections and communicating with them via sockets

    public Server(ServerSocket serverSock)//constructor sets up the server socket
    {
        this.serverSock = serverSock;
    }

    public void startServer()//method with no return type is responsible for keeping the server running
    {
        try
        {
            do
            {
                /*accept() method blocks/halts program until a client connects.
                if client connects, the method returns the client socket*/
                Socket clientSock = serverSock.accept();
                System.out.println("A CLIENT HAS CONNECTED");
                /*creates a chat object from class ServerChat--which has implemented an Interface called Runnable.
                Runnable is an interface implemented on a class whose instances will each be executed by a separate thread.*/
                ClientHandler clientHandler = new ClientHandler(clientSock);

                Thread thread = new Thread(clientHandler);//make a thread object and pass the socket(with runnable) to it
                thread.start();//Causes this thread to begin execution; the JVM calls the run method of this thread

            } while (!serverSock.isClosed());//keep looping while server socket is not closed
        }
        catch (IOException e) {}
    }

    public void closeServer()
    {
        try
        {
            if (serverSock != null)
                serverSock.close();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

    }

    public static void main(String args[]) throws IOException
    {
        //we are not root users in the school system, so we must use a port higher than 1025
        int PORT = 8372;

        ServerSocket serverSock = new ServerSocket(PORT);
        Server server = new Server(serverSock);
        server.startServer();
    }
}




